<?xml version="1.0"?>
<chapter
    xml:id="shell"
    version="5.0"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook">
    <!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
    <title>The Apache HBase Shell</title>

    <para>
        The Apache HBase Shell是基于<link
            xlink:href="http://jruby.org">(J)Ruby</link>（译者注：JRuby是基于Ruby实现的Java虚拟机），HBase在JRuby的IRB（译者注：IRB是一个互动的Ruby环境，是Interactive Ruby Shell-交互式Ruby Shell的简称）中添加了自己的命令。你可以像使用IRB一样来使用HBase Shell。
        </para>
    <para>为了运行HBase shell，你需要执行如下操作：</para>
    <programlisting>$ ./bin/hbase shell</programlisting>
    <para>输入 <command>help</command> 命令然后回车，紧接着会 <command>&lt;返回&gt;</command> 一个shell命令和选项的列表。
        浏览一下Help文档尾部的关于如何输入变量和选项的段落。尤其要注意的是表名、行、列名等必须要加引号。
        </para>
    <para>查阅 <xref
            linkend="shell_exercises" /> 可以看到更多shell操作的基本示例。 </para>
    <para>Rajeshbabu Chintaguntla在 <link
            xlink:href="http://learnhbase.wordpress.com/2013/03/02/hbase-shell-commands/">all shell
            commands</link> 提供了关于所有shell命令的使用示例。 </para>

    <section
        xml:id="scripting">
        <title>Ruby脚本使用</title>
        <para>HBase的脚本示例，可以在HBase <filename>bin</filename> 目录中查看。寻找以
             <filename>*.rb</filename>结尾的那些文件。 为了运行这些文件中的某一个，需要执行：</para>
        <programlisting>$ ./bin/hbase org.jruby.Main PATH_TO_SCRIPT</programlisting>
    </section>

    <section>
        <title>在非交互式模式下运行Shell</title>
        <para>
            HBase Shell中添加了一个新的非交互式模式(<link
                xlink:href="https://issues.apache.org/jira/browse/HBASE-11658">HBASE-11658)</link>。
            非交互式模式捕捉HBase Shell命令的退出状态（成功或失败）然后将这个状态返回给命令解释器。如果你使用非交互式模式，HBase Shell将仅仅返回它自己的退出状态。
            返回值<literal>0</literal>表示成功。</para>
        <para>为了调用非交互式模式，需要在HBase Shell中加上 <option>-n</option>或者
                <option>--non-interactive</option> 选项。</para>
    </section>
    
    <section xml:id="hbase.shell.noninteractive">
        <title>OS系统上的HBase Shell脚本</title>
        <para>
            你可以在操作系统的脚本解释器比如对于大多数Linux和Unix发行版中默认的Bash shell环境中来使用HBase Shell。
            下面的指南使用Bash语法，但是也能转换成C-风格(C-style)的shell，比如csh或tcsh。也可以进行修改，然后在微软的Windows脚本解释器上运行，欢迎提交你的修改。</para>
        <note>
            <para>HBase Shell命令数很多的时候，使用该方式运行很慢。因此，你需要自己决定何时使用操作系统命令行来完成HBase操作。
                </para>
        </note>
        <example>
            <title>给HBase Shell传递命令</title>
            <para>
                你可以在非交互式模式下使用<command>echo</command>命令和<literal>|</literal>管道操作传递命令给HBase Shell（查看<xref
                    linkend="hbasee.shell.noninteractive"/>）。 HBase命令可能需要使用转义字符。一些调试级别的输出在下面的例子已经被移除。
                </para>
            <screen>$ <userinput>echo "describe 'test1'" | ./hbase shell -n</userinput>
                <computeroutput>
Version 0.98.3-hadoop2, rd5e65a9144e315bb0a964e7730871af32f5018d5, Sat May 31 19:56:09 PDT 2014

describe 'test1'

DESCRIPTION                                          ENABLED
 'test1', {NAME => 'cf', DATA_BLOCK_ENCODING => 'NON true
 E', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0',
  VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIO
 NS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS =>
 'false', BLOCKSIZE => '65536', IN_MEMORY => 'false'
 , BLOCKCACHE => 'true'}
1 row(s) in 3.2410 seconds    
                </computeroutput>            
            </screen>
            <para>为了消除所有输出，将输出重定向到 <filename>/dev/null:</filename></para>
            <screen>$ <userinput>echo "describe 'test'" | ./hbase shell -n > /dev/null 2>&amp;1</userinput></screen>
        </example>
        <example>
            <title>检查脚本命令的结果</title>
            <para>
                因为脚本没有被交互运行，你需要一种方式来检查你的命令执行是成功还是失败。HBase shell使用标准约定来表示返回结果，即
                <literal>0</literal>代表成功，非0代表失败。Bash存储命令的返回值到一个被称为<varname>$?</varname>的特殊环境变量中。
                因为该变量在shell运行任何命令之后都会被重新赋值，所以你需要将返回值存储在一个在脚本中定义的其他变量中。
                </para>
            <para>
                 下面的脚本展示了存储返回值的一种方式并且基于它做出判定。
                </para>
            <programlisting language="bourne">
#!/bin/bash

echo "describe 'test'" | ./hbase shell -n > /dev/null 2>&amp;1
status=$?
echo "The status was " $status  
if ($status == 0); then
    echo "The command succeeded"
else
    echo "The command may have failed."
fi
return $status
            </programlisting>
        </example>
        <section>
            <title>检查脚本是成功还是失败</title>
            <para>
                获取一个退出值0代表着脚本执行成功。然而，获得一个非0的退出值不一定意味着命令失败。命令可能已经成功，但是客户端失去连接，
                或者一些其他事件掩盖了它的成功。这是因为RPC命令是无状态的。仅有的能确定操作状态的方式是去检查。例如，如果你的脚本创建了一个表，
                但是返回了一个非0的退出值，你应该在试图再次创建表之前先检查表是否创建成功。
                </para>
        </section>
    </section>
    
    <section>
        <title>从一个命令文件中读取HBase Shell命令</title>
        <para>你可以将HBase Shell命令输入到一个文本文件，每行输入一个命令，并且将该文件传给HBase shell。</para>
        <example>
            <title>命令文件的示例</title>
            <screen>
create 'test', 'cf'
list 'test'
put 'test', 'row1', 'cf:a', 'value1'
put 'test', 'row2', 'cf:b', 'value2'
put 'test', 'row3', 'cf:c', 'value3'
put 'test', 'row4', 'cf:d', 'value4'
scan 'test'
get 'test', 'row1'
disable 'test'
enable 'test'
            </screen>
        </example>
        <example>
            <title>直接使用HBase Shell来执行这些命令</title>
            <para>
                将命令文件路径作为仅有的参数传递给<command>hbase
                shell</command>命令。每一个命令被执行后将会显示它的输出。如果在你的所有命令中没有包含<command>exit</command>命令，你就会进入HBase shell的命令提示符中。
                没有办法以编程的方式来检查每个命令的单独执行的结果是成功还是失败。此外，尽管你看到了每个命令的输出，但是这些命令本身不会被输出，所以你很难在所有命令输出中定位处具体命令的输出。</para>
            <screen>
$ <userinput>./hbase shell ./sample_commands.txt</userinput>
<computeroutput>0 row(s) in 3.4170 seconds

TABLE
test
1 row(s) in 0.0590 seconds

0 row(s) in 0.1540 seconds

0 row(s) in 0.0080 seconds

0 row(s) in 0.0060 seconds

0 row(s) in 0.0060 seconds

ROW                   COLUMN+CELL
 row1                 column=cf:a, timestamp=1407130286968, value=value1
 row2                 column=cf:b, timestamp=1407130286997, value=value2
 row3                 column=cf:c, timestamp=1407130287007, value=value3
 row4                 column=cf:d, timestamp=1407130287015, value=value4
4 row(s) in 0.0420 seconds

COLUMN                CELL
 cf:a                 timestamp=1407130286968, value=value1
1 row(s) in 0.0110 seconds

0 row(s) in 1.5630 seconds

0 row(s) in 0.4360 seconds</computeroutput>                
            </screen>
        </example>
    </section>
    <section>
        <title>传递VM选项给Shell</title>
        <para>
            你可以通过使用<code>HBASE_SHELL_OPTS</code>环境变量传递VM选项给HBase Shell。你可以通过编辑 <filename>~/.bashrc</filename>在你的环境中设置它，
            或者将它作为启动HBase Shell命令的一部分进行设置。下面的例子设置了一些垃圾搜集相关的变量，仅适用于运行HBase Shell的VM的生命周期。 命令应该运行在单行，命令太长时，
            为了方便阅读，可以使用<literal>\</literal>字符来进行连接。
            </para>
        <screen language="bourne">
$ <userinput>HBASE_SHELL_OPTS="-verbose:gc -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps \ 
  -XX:+PrintGCDetails -Xloggc:$HBASE_HOME/logs/gc-hbase.log" ./bin/hbase shell</userinput>            
        </screen>
    </section>
    <section
        xml:id="shell_tricks">
        <title>Shell技巧</title>
        <section
            xml:id="table_variables">
            <title>表变量</title>

            <para>
                HBase 0.95增加了一个shell命令，该命令提供了对于表的jruby风格的面向对象的引用。之前所有的shell命令中，你必须指定表名作为一个参数。
                HBase 0.95中可以给一个表分配一个jruby变量。表的引用可以用来完成数据读写操作例如插入(puts)、遍历(scans)和读取(gets)，也可以实现管理功能，比如
                禁用(disable)、移除(drop)和描述(describing)一个表。 </para>

            <para> 例如，之前你需要指定一个表名：</para>
            <screen>
hbase(main):000:0> create ‘t’, ‘f’
0 row(s) in 1.0970 seconds
hbase(main):001:0> put 't', 'rold', 'f', 'v'
0 row(s) in 0.0080 seconds

hbase(main):002:0> scan 't' 
ROW                                COLUMN+CELL                                                                                      
 rold                              column=f:, timestamp=1378473207660, value=v                                                      
1 row(s) in 0.0130 seconds

hbase(main):003:0> describe 't'
DESCRIPTION                                                                           ENABLED                                       
 't', {NAME => 'f', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_ true                                          
 SCOPE => '0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => '2                                               
 147483647', KEEP_DELETED_CELLS => 'false', BLOCKSIZE => '65536', IN_MEMORY => 'false                                               
 ', BLOCKCACHE => 'true'}                                                                                 
1 row(s) in 1.4430 seconds

hbase(main):004:0> disable 't'
0 row(s) in 14.8700 seconds

hbase(main):005:0> drop 't'
0 row(s) in 23.1670 seconds

hbase(main):006:0> 
	  </screen>

            <para> 现在你可以将表赋给一个变量，然后在jruby shell中直接调用它。</para>
            <screen>
hbase(main):007 > t = create 't', 'f'
0 row(s) in 1.0970 seconds

=> Hbase::Table - t
hbase(main):008 > t.put 'r', 'f', 'v'
0 row(s) in 0.0640 seconds
hbase(main):009 > t.scan
ROW                           COLUMN+CELL                                                                        
 r                            column=f:, timestamp=1331865816290, value=v                                        
1 row(s) in 0.0110 seconds
hbase(main):010:0> t.describe
DESCRIPTION                                                                           ENABLED                                       
 't', {NAME => 'f', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_ true                                          
 SCOPE => '0', VERSIONS => '1', COMPRESSION => 'NONE', MIN_VERSIONS => '0', TTL => '2                                               
 147483647', KEEP_DELETED_CELLS => 'false', BLOCKSIZE => '65536', IN_MEMORY => 'false                                               
 ', BLOCKCACHE => 'true'}                                                                                 
1 row(s) in 0.0210 seconds
hbase(main):038:0> t.disable
0 row(s) in 6.2350 seconds
hbase(main):039:0> t.drop
0 row(s) in 0.2340 seconds
	  </screen>

            <para> 如果表已经被创建，你可以通过使用get_table方法来获取一个表的变量：</para>
            <screen>
hbase(main):011 > create 't','f'
0 row(s) in 1.2500 seconds

=> Hbase::Table - t
hbase(main):012:0> tab = get_table 't'
0 row(s) in 0.0010 seconds

=> Hbase::Table - t
hbase(main):013:0> tab.put ‘r1’ ,’f’, ‘v’ 
0 row(s) in 0.0100 seconds
hbase(main):014:0> tab.scan
ROW                                COLUMN+CELL                                                                                      
 r1                                column=f:, timestamp=1378473876949, value=v                                                      
1 row(s) in 0.0240 seconds
hbase(main):015:0> 
	  </screen>

            <para> 还加入了列出所有表，将结果作为一个字符串返回的功能。
                你可以基于这些名字使用jruby命令来操作这些表。list_snapshots命令的功能也类似。
                </para>
            <screen>
hbase(main):016 > tables = list(‘t.*’)
TABLE                                                                                                                               
t                                                                                                                                   
1 row(s) in 0.1040 seconds

=> #&lt;#&lt;Class:0x7677ce29>:0x21d377a4>
hbase(main):017:0> tables.map { |t| disable t ; drop  t}
0 row(s) in 2.2510 seconds

=> [nil]
hbase(main):018:0> 
            </screen>
        </section>

        <section>
            <title><filename>irbrc</filename></title>
            <para>在你自己的home目录中创建你自己的 <filename>.irbrc</filename> 文件。然后加入自定义的命令。
                一个有用的功能就是记录命令历史，这样可以保存所有的shell调用历史：
               </para>
            <screen>
$ more .irbrc
require 'irb/ext/save-history'
IRB.conf[:SAVE_HISTORY] = 100
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-save-history"</screen>
            <para>可以查看 <application>ruby</application> 关于
                    <filename>.irbrc</filename> 的文档来学习其他更多的配置。
            </para>
        </section>
        <section>
            <title>日志数据的时间戳</title>
            <para> 为了将hbase日志中的日期'08/08/16 20:56:29'转换为时间戳，操作如下：</para>
            <screen>
hbase(main):021:0> import java.text.SimpleDateFormat
hbase(main):022:0> import java.text.ParsePosition
hbase(main):023:0> SimpleDateFormat.new("yy/MM/dd HH:mm:ss").parse("08/08/16 20:56:29", ParsePosition.new(0)).getTime() => 1218920189000</screen>
            <para> 也可以反过来操作：</para>
            <screen>
hbase(main):021:0> import java.util.Date
hbase(main):022:0> Date.new(1218920189000).toString() => "Sat Aug 16 20:56:29 UTC 2008"</screen>
            <para> 为了将日志格式输出为与HBase日志格式完全相同的格式，可以参考 <link
                    xlink:href="http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</link>。
            </para>
        </section>
        <section>
            <title>调试</title>
            <section>
                <title>Shell切换到调试模式</title>
                <para>
                    你可以将shell切换到调试模式以便查看到更多输出 -- 例如，更多的异常堆栈的信息 -- 只需要使用命令：
                   </para>
                <programlisting>hbase> debug &lt;RETURN&gt;</programlisting>
            </section>
            <section>
                <title>调试日志级别</title>
                <para>为了在shell中启用调试级别的日志，需要在启动时加上
                        <command>-d</command> 选项。</para>
                <programlisting>$ ./bin/hbase shell -d</programlisting>
            </section>
        </section>
        <section>
            <title>命令</title>
            <section>
                <title>统计</title>
                <para>
                    统计命令返回一个表中行的数目。当你配置了合适的缓存时，该操作会很快。
                    <programlisting>hbase> count '&lt;tablename&gt;', CACHE => 1000</programlisting>
                    上面的统计操作一次取100行数据。如果你的行很大，需要将缓存调低。默认一次取一行。
                    </para>
            </section>
        </section>

    </section>
</chapter>
