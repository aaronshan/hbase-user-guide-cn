<?xml version="1.0" encoding="UTF-8"?>
<chapter
  version="5.0"
  xml:id="getting_started"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:m="http://www.w3.org/1998/Math/MathML"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:db="http://docbook.org/ns/docbook">
  <!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
  <title>入门</title>

  <section>
    <title>介绍</title>

    <para><xref
        linkend="quickstart" /> 将会介绍如何在单一节点上运行单机版的HBase实例。 </para>
  </section>

  <section
    xml:id="quickstart">
    <title>快速开始 - 单机HBase</title>

    <para>该指南将会描述如何设置一个运行在本地文件系统上的单机版HBase。对于生产环境来讲，这样的配置是不合适的，但是它可以让你体验一下HBase。本节将展示如何使用<command>HBase Shell</command>命令来在HBase中创建一个表，在该表中插入几行数据，执行针对该表的Put和Scan操作，enable或disable该表，开启和关闭HBase。从下载完HBase到执行完上述操作，花费的时间将少于10分钟。 </para>
    <warning
      xml:id="local.fs.durability">
      <title>本地文件系统和持久性</title>
      <para><emphasis>以下建议仅仅针对HBase 0.98.2和更早的版本。在HBase 0.98.3和之后的版本，该问题已经被修复。查看<link
          xlink:href="https://issues.apache.org/jira/browse/HBASE-11272">HBASE-11272</link> 和
        <link
            xlink:href="https://issues.apache.org/jira/browse/HBASE-11218">HBASE-11218</link>.</emphasis></para>
      <para>基于本地文件系统使用HBase不能保证持久性。如果文件没有正确的关闭，HDFS的本地文件系统实现将丢失一些编辑信息。当你实验一个新的软件，没有干净的开启或停止守护进程的时候，这种情况很有可能发生。你需要在HDFS上运行HBase来确保所有的写入都被保留。在本地文件系统上运行HBase是为了让你快速了解系统如何工作，作为第一阶段的评估。详见 <link
          xlink:href="https://issues.apache.org/jira/browse/HBASE-3696" /> 和它相关的更多细节都是关于运行在本地文件系统上产生的问题。</para>
    </warning>
    <note
      xml:id="loopback.ip.getting.started">
      <title>环回(Loopback) IP - HBase 0.94.x 和更早版本</title>
      <para><emphasis>以下建议仅仅针对hbase-0.94.x和更早的版本。在hbase-0.96.0和之后的版本中，该问题已经被修复。</emphasis></para>

      <para>在HBase 0.94.x之前, HBase希望环回(loopback)IP地址为127.0.0.1。 Ubuntu和其他类似的发行版本将该值默认设置为127.0.1.1，这将给你带来一些问题。查看 <link
          xlink:href="http://blog.devving.com/why-does-hbase-care-about-etchosts/">为何HBase关心/etc/hosts?</link> 以便查看更多细节。</para>
      <example>
        <title>Ubuntu系统中的/etc/hosts文件</title>
        <para>在Ubuntu系统中，下面的 <filename>/etc/hosts</filename> 文件在HBase 0.94.x和更早版本上工作正常。如果你的运行出现问题，请使用以下配置作为模板。</para>
        <screen>
127.0.0.1 localhost
127.0.0.1 ubuntu.ubuntu-domain ubuntu
        </screen>
      </example>
    </note>

    <section>
      <title>需要的JDK版本</title>
      <para>HBase需要安装JDK。 查看 <xref linkend="java" /> 以便了解支持的JDK版本信息。</para>
    </section>

    <section>
      <title>开始使用HBase</title>

      <procedure>
        <title>下载，配置和启动HBase</title>
        <step>
          <para>从以下列表 <link
          xlink:href="http://www.apache.org/dyn/closer.cgi/hbase/">Apache下载镜像</link>中选择一个站点进行下载。
        点击一个建议的链接，将带你进入一个<emphasis>HBase
          发行版</emphasis>的镜像。 点击被命名为 <filename>stable</filename> 的文件夹并且下载其中以 <filename>.tar.gz</filename> 结尾的二进制压缩文件到你的本地文件系统。确定要选择的版本和你将要使用的Hadoop版本能相匹配。在大多数情况下，你应该选择一个针对Hadoop 2的文件。它的命名类似于 <filename>hbase-0.98.3-hadoop2-bin.tar.gz</filename>。 现在不要下载以
        <filename>src.tar.gz</filename> 结尾的文件。</para>
        </step>
        <step>
          <para>提取被下载的文件到一个新创建的目录。</para>
          <screen language="bourne">
$ tar xzvf hbase-<![CDATA[<?eval ${project.version}?>]]>-hadoop2-bin.tar.gz  
$ cd hbase-<![CDATA[<?eval ${project.version}?>]]>-hadoop2/
          </screen>
        </step>
        <step>
          <para>编辑 <filename>conf/hbase-site.xml</filename>, 它是主要的HBase配置文件。此时，你仅仅需要指定一个本地目录以便HBase和Zookeeper写入数据。默认情况下，一个新的目录被创建到/tmp目录下。许多服务器被配置成在重启后删除/tmp目录下的所有内容。所以你应该将数据存储在其他地方。 下面的配置将存储HBase的数据在
              <filename>hbase</filename> 目录, 该目录在一个名为
              <systemitem>testuser</systemitem>的用户的家目录(home)下。 黏贴<markup>&lt;configuration&gt;</markup>标签下的<markup>&lt;property&gt;</markup>标签内容到新安装的HBase配置文件中去。</para>
          <example>
            <title>一个单机HBase的 <filename>hbase-site.xml</filename> 配置文件的示例</title>
            <programlisting language="xml"><![CDATA[
<configuration>
  <property>
    <name>hbase.rootdir</name>
    <value>file:///home/testuser/hbase</value>
  </property>
  <property>
    <name>hbase.zookeeper.property.dataDir</name>
    <value>/home/testuser/zookeeper</value>
  </property>
</configuration>              
              ]]>
            </programlisting>
          </example>
          <para>你不需要创建HBase数据目录，HBase会自动创建该目录。. 如果你已经创建了该目录，HBase将尝试做迁移，你需要考虑这是不是你想要的。</para>
        </step>
        <step xml:id="start_hbase">
          <para>脚本<filename>bin/start-hbase.sh</filename> 提供了一个便捷的方式来启动HBase。运行该命令, 如果一切没有问题，那么一个日志信息将会被输出，表明HBase启动成功。你可以使用 <command>jps</command>
            命令来验证是否有一个叫做 <literal>HMaster</literal>的进程正在运行。在单机模式下，HBase在单个JVM中运行所有的守护进程。例如，HMaster, 一个单独的HRegionServer, 和ZooKeeper守护进程。</para>
          <note><para>Java需要被安装并且可用。如果你得到一个Java没有被安装的错误提示，但是在系统中存在Java，那么它可能在一个非标准的位置。编辑<filename>conf/hbase-env.sh</filename> 文件并且修改
            <envar>JAVA_HOME</envar> 为系统中包含<filename>bin/java</filename> 的目录。</para></note>
        </step>
      </procedure>

      <procedure xml:id="shell_exercises">
        <title>初次使用HBase</title>
        <step>
          <title>连接HBase</title>
          <para>使用<command>hbase shell</command>
            命令连接到你正在运行的HBase， 这个命令在HBase安装目录下的 <filename>bin/</filename> 目录。 在这个示例中，你打开HBase shell时被输出的的一些使用和版本信息已经被忽略。HBase Shell 的提示以
            <literal>&gt;</literal> 字符结尾。</para>
          <screen language="bourne">
$ <userinput>./bin/hbase shell</userinput>
hbase(main):001:0&gt; 
          </screen>
        </step>
        <step>
          <title>显示HBase Shell帮助文本</title>
          <para>输入 <literal>help</literal> 并且按下回车键，将真是一些基本的HBase Shell使用信息和一些命令的示例。注意表名，行，列的信息必须包括在引号字符内。</para>
        </step>
        <step>
          <title>创建一个表</title>
          <para>使用<code>create</code> 命令来创建一个新的表。你必须指定表名和列簇(ColumnFamily)名。</para>
          <screen>
hbase&gt; <userinput>create 'test', 'cf'</userinput>    
0 row(s) in 1.2200 seconds
          </screen>
        </step>
        <step>
          <title>列出所有表的信息</title>
          <para>使用 <code>list</code> 命令 </para>
          <screen>
hbase&gt; <userinput>list 'test'</userinput>
TABLE
test
1 row(s) in 0.0350 seconds

=> ["test"]
          </screen>
        </step>
        <step>
          <title>给表中插入数据</title>
          <para>为了将数据插入到表中，需要使用 <code>put</code> 命令。</para>
          <screen>
hbase&gt; <userinput>put 'test', 'row1', 'cf:a', 'value1'</userinput>
0 row(s) in 0.1770 seconds

hbase&gt; <userinput>put 'test', 'row2', 'cf:b', 'value2'</userinput>
0 row(s) in 0.0160 seconds

hbase&gt; <userinput>put 'test', 'row3', 'cf:c', 'value3'</userinput>
0 row(s) in 0.0260 seconds          
          </screen>
          <para>此处，我们插入了三条记录。第一次插入的行键(rowKey)是
              <literal>row1</literal>, 列是 <literal>cf:a</literal>, 值为
              <literal>value1</literal>。 在HBase中，列前面有一个列簇作为前缀，在这个例子中，列簇为
              <literal>cf</literal> ，紧接着是列名，在这个例子中，列名是<literal>a</literal> 。</para>
        </step>
        <step>
          <title>一次遍历表中的所有数据</title>
          <para>从HBase中获取数据的一种方式是使用scan。使用 <command>scan</command>
            命令能遍历一个表中的所有数据。你可以对scan做一些限制，但是当前所有的数据都会被取出。</para>
          <screen>
hbase&gt; <userinput>scan 'test'</userinput>
ROW                   COLUMN+CELL
 row1                 column=cf:a, timestamp=1403759475114, value=value1
 row2                 column=cf:b, timestamp=1403759492807, value=value2
 row3                 column=cf:c, timestamp=1403759503155, value=value3
3 row(s) in 0.0440 seconds
          </screen>
        </step>
        <step>
          <title>获取一行数据</title>
          <para>为了获取表中的一行数据，需要使用 <command>get</command> 命令。</para>
          <screen>
hbase&gt; <userinput>get 'test', 'row1'</userinput>
COLUMN                CELL
 cf:a                 timestamp=1403759475114, value=value1
1 row(s) in 0.0230 seconds            
          </screen>
        </step>
        <step>
          <title>使表不可用</title>
          <para>如果你想要删除一个表或者更改该表的一些配置，那么你需要先将表设置为不可用，使用 <code>disable</code>
            命令可以将表设置为不可用。你可以使用 <code>enable</code> 命令使表重新变为可用。</para>
          <screen>
hbase&gt; disable 'test'
0 row(s) in 1.6270 seconds

hbase&gt; enable 'test'
0 row(s) in 0.4500 seconds
          </screen>
          <para>再次使表格变为不可用。如果你已经测试了上面的 <command>enable</command> 命令:</para>
          <screen>
hbase&gt; disable 'test'
0 row(s) in 1.6270 seconds            
          </screen>
        </step>
        <step>
          <title>删除表</title>
          <para>为了删除一个表，需要使用 <code>drop</code> 命令。</para>
          <screen>
hbase&gt; drop 'test'
0 row(s) in 0.2900 seconds            
          </screen>
        </step>
        <step>
          <title>退出HBase Shell</title>
          <para>为了退出HBase Shell并且断掉与你的集群的连接，需要使用
              <command>quit</command> 命令。 HBase仍然在后台继续运行。</para>
        </step>
      </procedure>
      
      <procedure
        xml:id="stopping">
        <title>停止HBase</title>
        <step>
          <para>脚本 <filename>bin/start-hbase.sh</filename> 提供了一种方便的开启所有HBase守护进程的功能，脚本 <filename>bin/stop-hbase.sh</filename>
            将停止这些守护进程。</para>
          <screen language="bourne">
$ ./bin/stop-hbase.sh
stopping hbase....................
$
        </screen>
        </step>
        <step>
          <para>运行了改名了之后，将会花费几分钟的时间来关闭所有守护进程。使用 <command>jps</command> 命令查看HMaster和HRegionServer进程是否被关闭。</para>
        </step>
      </procedure>
    </section>

    <section xml:id="quickstart-pseudo">
      <title>中级 - 伪分布式的本地安装</title>
      <para>在体验过 <xref linkend="quickstart" />过程之后，你可以重新配置HBase，使它运行在伪分布式模式下。伪分布式模式意味着HBase仍然运行在单机上，但是每一个HBase守护进程 (HMaster,
      HRegionServer, and Zookeeper) 运行在独立的进程中。默认情况下，除非你配置了在<xref linkend="quickstart" />中提到的
      <code>hbase.rootdir</code> 属性, 否则你的数据仍然被保存在 <filename>/tmp/</filename>路径下。 在以下的演示中，我们将数据存储在HDFS中，此处假设HDFS已经可用。你也可以跳过HDFS的配置，继续将数据保存在本地文件系统中。 </para>
      <note>
        <title>Hadoop配置</title>
        <para>此过程假定你已经在你的本地文件系统或者远程系统配置好Hadoop和HDFS，并且它们当前正在运行并且可用。另外也假定你运行的是Hadoop 2。目前，Hadoop官网的文档不包括如何快速开始Hadoop 2，但是， <link
            xlink:href="http://www.alexjf.net/blog/distributed-systems/hadoop-yarn-installation-definitive-guide">http://www.alexjf.net/blog/distributed-systems/hadoop-yarn-installation-definitive-guide</link>
          是一个好的开始指南。</para>
      </note>
      <procedure>
        <step>
          <title>先停止正在运行的HBase</title>
          <para>如果你刚刚完成了 <xref linkend="quickstart" /> 部分并且HBase仍然在运行，请先停止它。 该过程将创建一个新的目录用来存储HBase数据，所以你之前创建的所有数据库都会丢失。</para>
        </step>
        <step>
          <title>配置HBase</title>
          <para>
            编辑 <filename>hbase-site.xml</filename> 配置文件。首先，增加如下属性。属性 <code>hbase.cluster.distributed</code> 应该设置为 <code>true</code>
            (它默认是 <code>false</code>), 该属性表明HBase运行在分布式模式下，每个守护进程有独立的JVM实例。HBase从1.0.0版本开始, HMaster实例也是一个RegionServer。因此在伪分布式模式下，仅仅有一个HMaster (也是一个RegionServer)实例被默认开启。因为仅仅有一个RegionServer (HMaster)，属性 <code>hbase.master.wait.on.regionservers.mintostart</code> 应该被设置为
            <code>1</code> (它从1.0.0版本开始被默认设置为 <code>2</code> )。
          </para>
          <programlisting language="xml"><![CDATA[
<property>
  <name>hbase.cluster.distributed</name>
  <value>true</value>
</property>
<property>
  <name>hbase.master.wait.on.regionservers.mintostart</name>
  <value>1</value>
</property>
            ]]></programlisting>
          <para>接下来，改变 <code>hbase.rootdir</code> ，将本地文件系统改为HDFS，使用 <code>hdfs:////</code> 这样的URI语法。在该例中，HDFS运行在本地主机的8020端口。</para>
          <programlisting language="xml"><![CDATA[
<property>
  <name>hbase.rootdir</name>
  <value>hdfs://localhost:8020/hbase</value>
</property>            
            ]]>
          </programlisting>
          <para>你不需要在HDFS中创建一个目录，HBase将会自动创建。如果你已经创建了该目录，HBase将尝试做迁移，你需要考虑这是不是你想要的。</para>
        </step>
        <step>
          <title>启动HBase</title>
          <para>使用 <filename>bin/start-hbase.sh</filename> 命令来启动HBase。如果你的系统配置正确，那么 <command>jps</command> 命令将会显示HMaster和HRegionServer进程正在运行。</para>
        </step>
        <step>
          <title>检查HDFS中的HBase目录</title>
          <para>如果所有过程都正确运行，HBase将会在HDFS中创建它的目录。在上述配置中，它被存储在HDFS中的<filename>/hbase/</filename> 目录。 你可以使用Hadoop<filename>bin/</filename>目录下的 <command>hadoop fs</command> 命令来显示该目录。</para>
          <screen  language="bourne">
$ <userinput>./bin/hadoop fs -ls /hbase</userinput>
Found 7 items
drwxr-xr-x   - hbase users          0 2014-06-25 18:58 /hbase/.tmp
drwxr-xr-x   - hbase users          0 2014-06-25 21:49 /hbase/WALs
drwxr-xr-x   - hbase users          0 2014-06-25 18:48 /hbase/corrupt
drwxr-xr-x   - hbase users          0 2014-06-25 18:58 /hbase/data
-rw-r--r--   3 hbase users         42 2014-06-25 18:41 /hbase/hbase.id
-rw-r--r--   3 hbase users          7 2014-06-25 18:41 /hbase/hbase.version
drwxr-xr-x   - hbase users          0 2014-06-25 21:49 /hbase/oldWALs
          </screen>
        </step>
        <step>
          <title>创建一个表并且插入数据</title>
          <para>你可以使用HBase Shell来创建一个表，并且给该表插入数据。可以使用 <xref linkend="shell_exercises" /> 中的内容来遍历或获取数据。</para>
        </step>
        <step>
          <title>启动或停止一个备份的HBase Master (HMaster) 服务器。</title>
          <note>
            <para>生产环境中，在同一个硬件上运行多个HMaster实例是没有意义的，一个伪分布式的集群对于生产环境也没有意义。本步骤仅仅用于测试和学习。</para>
          </note>
          <para>HMaster服务器控制着HBase集群。你可以启动9个备份的HMaster服务器，一共10个HMater。为了开启备份的HMaster，需要使用 <command>local-master-backup.sh</command>脚本。 对于每一个你想要启动的备份master，添加一个对应的参数作为启动的端口的偏移量。每一个Hmaster都使用三个端口(默认是16010，16020和16030。)，因此如果将启动的端口的偏移量设为2，那么备份的HMaster将使用端口16012，16022和16032。接下来的命令将启动3个备份的HMaster，它们分别使用端口16012/16022/16032，16013/16023/16033和16015/16025/16035。</para>
            <screen language="bourne">
$ ./bin/local-master-backup.sh 2 3 5             
            </screen>
          <para>为了杀死一个备份master而不是整个集群，你需要找到该备份master的进程ID(PID)。 PID被存储在一个名字类似于
            <filename>/tmp/hbase-<replaceable>USER</replaceable>-<replaceable>X</replaceable>-master.pid</filename>的文件中。
          这个文件的内容只有PID。 你可以使用 <command>kill -9</command>
            命令杀死这个PID。下面的命令将杀死端口偏移量为1的master，但剩余的仍然运行：</para>
          <screen language="bourne">
$ cat /tmp/hbase-testuser-1-master.pid |xargs kill -9            
          </screen>
        </step>
        <step>
          <title>启动和关闭其他的RegionServers</title>
          <para>HRegionServer受Master的指示，管理着其StoreFiles中存储的数据。 一般情况下，集群中的每个节点运行着一个HRegionServer。在伪分布式模式下，在同一个系统中运行多个HRegionServer仅仅用于测试。 <command>local-regionservers.sh</command> 命令允许你运行多个RegionServers。 它的工作方式和
            <command>local-master-backup.sh</command> 命令类似，你需要提供一个端口的偏移量作为参数。每一个RegionServer需要两个端口，这两个端口默认是16020和16030。然而， 对于其他的RegionServers，基本端口不是默认的端口，因为从1.0.0版本开始，HMaster也是一个RegionServer，所以默认的端口被HMaster使用。所以使用了16200和16300取代了之前的默认端口。下面的命令启动了4个其他的RegionServers，它们运行在以端口16202/16302(基本端口16200/16300加2)开始的序列端口上。</para>
          <screen language="bourne">
$ .bin/local-regionservers.sh start 2 3 4 5            
          </screen>
          <para>为了手动停止一个RegionServer，需要运行命令 <command>local-regionservers.sh</command>
            并且以 <literal>stop</literal> 和server的端口的偏移量作为参数。</para>
          <screen language="bourne">$ .bin/local-regionservers.sh stop 3</screen>
        </step>
        <step>
          <title>停止HBase</title>
          <para>你可以使用与 <xref
              linkend="quickstart" /> 相同的过程来停止HBase。即使用
            <filename>bin/stop-hbase.sh</filename> 命令。</para>
        </step>
      </procedure>
    </section>
    
    <section xml:id="quickstart-fully-distributed">
      <title>高级 - 完全分布式</title>
      <para>在现实中，你需要一个完全分布式的配置，以全面的测试HBase，并使用它在现实世界的情景。在分布式的配置中，集群包含多个节点，每一个节点运行一个或多个HBase守护进程。这些包括主Master和备份Master实例，多个Zookeeper节点，以及多个RegionServer节点。</para>
      <para>这个高级的快速开始在集群中增加了两个节点。结构如下：</para>
      <table>
        <title>分布式集群示例结构</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>节点名</entry>
              <entry>Master</entry>
              <entry>ZooKeeper</entry>
              <entry>RegionServer</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>node-a.example.com</entry>
              <entry>是</entry>
              <entry>是</entry>
              <entry>否</entry>
            </row>
            <row>
              <entry>node-b.example.com</entry>
              <entry>备份(backup)</entry>
              <entry>是</entry>
              <entry>是</entry>
            </row>
            <row>
              <entry>node-c.example.com</entry>
              <entry>否</entry>
              <entry>是</entry>
              <entry>是</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>快速开始假定每一个节点是一个虚拟机并且它们运行在同一个网络。它建立在之前的快速开始 <xref linkend="quickstart-pseudo" />之上，
        假定你现在配置的系统名为 <code>node-a</code>. 在继续之前先停止 <code>node-a</code> 上的HBase。</para>
      <note>
        <para>请确定所有的节点之间可以相互进行通信，并且没有防火墙规则阻止它们之间进行通信。如果出现了类似<literal>no route to host</literal>的错误，请检查你的防火墙。</para>
      </note>
      <procedure xml:id="passwordless.ssh.quickstart">
        <title>配置SSH无密码访问</title>
        <para><code>node-a</code> 需要能登录到 <code>node-b</code> 和
          <code>node-c</code> (还有它自己) 以便启动所有守护进程。in order to start the daemons.最方便的方式是在所有的主机上使用相同的用户名，并且配置从
          <code>node-a</code> 到其他所有节点的SSH无密码登录。 </para>
        <step>
          <title>在 <code>node-a</code>生成一个密钥对</title>
          <para>登录将要运行HBase的用户账号，生成SSH密钥对，使用如下命令：
          </para>
          <screen language="bourne">$ ssh-keygen -t rsa</screen>
          <para>如果命令执行成功，密钥对将会打印到标准输出。默认的公有密钥默认名为 <filename>id_rsa.pub</filename>.</para>
        </step>
        <step>
          <title>在其他节点上创建持有共享密钥的目录</title>
          <para>在 <code>node-b</code> 和 <code>node-c</code>, 登录到HBase用户并且在该用户的家目录(home目录)下创建一个 <filename>.ssh/</filename> 目录，如果它还不存在。如果它已经存在，那么它可能已经包含其他密钥。</para>
        </step>
        <step>
          <title>拷贝公有密钥到其他节点</title>
          <para>从 <code>node-a</code> 安全拷贝公有密钥到其他节点，通过使用 <command>scp</command> 命令或其他安全方式。在其他每一个节点上，创建一个名为 <filename>.ssh/authorized_keys</filename>的新文件。 <emphasis>如果它不存在</emphasis>， 然后将
            <filename>id_rsa.pub</filename> 文件的内容追加到它的末尾。 注意，在<code>node-a</code> 上你也需要这样做。</para>
          <screen language="bourne">$ cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</screen>
        </step>
        <step>
          <title>测试无密码登录</title>
          <para>如果你正确完成了上面的过程，那么你在 <code>node-a</code> 上使用SSH登录到其他节点，使用相同的用户名，你将不需要输入密码。
          </para>
        </step>
        <step>
          <para>因为 <code>node-b</code> 将作为备份(backup) Master运行, 重复上面的过程，使得<code>node-b</code> 也能无密码访问 <code>node-a</code>可以访问的所有节点。 注意不要重写已经存在的 <filename>.ssh/authorized_keys</filename> 文件，使用 <code>&gt;&gt;</code> 操作而不是 <code>&gt;</code> 操作将新的密钥增加到文件中。</para>
        </step>
      </procedure>
      
      <procedure>
        <title><code>node-a</code> 的准备</title>
        <para><code>node-a</code> 将运行主(primary) master 和ZooKeeper进程，但是不运行RegionServers。</para>
        <step>
          <title>停止<code>node-a</code>上已经启动的RegionServer</title>
          <para>编辑 <filename>conf/regionservers</filename> 并且移除包含
              <literal>localhost</literal>的那一行。 增加主机名或IP地址
              <code>node-b</code> 和 <code>node-c</code>到文件中。 即使你确实想在<code>node-a</code>上运行一个RegionServer, 你也应该使用一个主机名来让其他服务器能和它进行通信。在这个例子中，它应该是
              <literal>node-a.example.com</literal>。 这能使你分发配置文件到集群中域名不同的所有节点。保存该文件。</para>
        </step>
        <step>
          <title>配置 <code>node-b</code> 为HBase的备份(backup) master</title>
          <para>在目录 <filename>conf/</filename> 下创建一个名为
            <filename>backup-masters</filename>的文件，并且增加
            <code>node-b</code>的主机名到文件中。在这个示例中，主机名是
            <literal>node-b.example.com</literal>.</para>
        </step>
        <step>
          <title>配置ZooKeeper</title>
          <para>在真实环境下，你应该仔细考虑你的ZooKeeper配置。你可以在<xref
                  linkend="zookeeper" />找到关于ZooKeeper配置的更多信息。 这个配置将指导HBase启动和管理集群中每个节点的ZooKeeper实例。</para>
          <para>在 <code>node-a</code>上，编辑 <filename>conf/hbase-site.xml</filename> 文件并且添加如下属性。</para>
          <programlisting language="bourne"><![CDATA[
<property>
  <name>hbase.zookeeper.quorum</name>
  <value>node-a.example.com,node-b.example.com,node-c.example.com</value>
</property>
<property>
  <name>hbase.zookeeper.property.dataDir</name>
  <value>/usr/local/zookeeper</value>
</property>            
            ]]></programlisting>
        </step>
        <step>
          <para>在配置中你提及到 <code>node-a</code> 为<literal>localhost</literal>的地方，
            , 变成使用主机名来指代 <code>node-a</code>。在这个例子中， 主机名为 <literal>node-a.example.com</literal>.</para>
        </step>
      </procedure>
      <procedure>
        <title><code>node-b</code> 和 <code>node-c</code>的准备</title>
        <para><code>node-b</code> 将作为备份(backup) master服务器和ZooKeeper实例。</para>
        <step>
          <title>下载且解压HBase.</title>
          <para>下载且解压HBase到 <code>node-b</code>，就像你在单机和伪分布式的快速开始时做的那样。</para>
        </step>
        <step>
          <title>从 <code>node-a</code> 拷贝配置文件到<code>node-b</code>和
            <code>node-c</code></title>
          <para>集群中的每一个节点需要有相同的配置信息。拷贝<filename>conf/</filename> 目录下的所有文件到<code>node-b</code> 和 <code>node-c</code>的 <filename>conf/</filename>目录中。</para>
        </step>
      </procedure>

      <procedure>
        <title>启动和测试你的集群</title>
        <step>
          <title>确定HBase没有在任何节点上运行</title>
          <para>如果你在之前的测试中忘记关闭HBase，你将会遇到错误。使用<command>jps</command>命令在所有的节点上检查是否有HBase正在运行。查看是否有进程 <literal>HMaster</literal>，
            <literal>HRegionServer</literal>和 <literal>HQuorumPeer</literal>。如果存在，先杀死这些进程。</para>
        </step>
        <step>
          <title>启动集群</title>
          <para>在 <code>node-a</code>上，运行 <command>start-hbase.sh</command> 命令。你将获得的输出和下面的例子类似。</para>
          <screen language="bourne">
$ <userinput>bin/start-hbase.sh</userinput>
node-c.example.com: starting zookeeper, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-zookeeper-node-c.example.com.out
node-a.example.com: starting zookeeper, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-zookeeper-node-a.example.com.out
node-b.example.com: starting zookeeper, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-zookeeper-node-b.example.com.out
starting master, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-master-node-a.example.com.out
node-c.example.com: starting regionserver, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-regionserver-node-c.example.com.out
node-b.example.com: starting regionserver, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-regionserver-node-b.example.com.out            
node-b.example.com: starting master, logging to /home/hbuser/hbase-0.98.3-hadoop2/bin/../logs/hbase-hbuser-master-nodeb.example.com.out          
          </screen>
          <para>首先启动ZooKeeper，紧接着启动master，然后是RegionServers，最后是备份(backup)masters。 </para>
        </step>
        <step>
          <title>确定那些进程是否正在运行</title>
          <para>在集群的每一个节点上，运行 <command>jps</command> 命令来验证每一个服务器上的进程是否正确运行。你可能会看到其他的java进程正在你的服务器上运行，它们可能被用于其他目的。</para>
          <example>
            <title><code>node-a</code> <command>jps</command> 输出</title>
            <screen language="bourne">
$ <userinput>jps</userinput>
20355 Jps
20071 HQuorumPeer
20137 HMaster    
            </screen>
          </example>
          <example>
            <title><code>node-b</code> <command>jps</command> 输出</title>
            <screen language="bourne">
$ <userinput>jps</userinput>
15930 HRegionServer
16194 Jps
15838 HQuorumPeer
16010 HMaster            
            </screen>
          </example>
          <example>
            <title><code>node-c</code> <command>jps</command> 输出</title>
            <screen language="bourne">
$ <userinput>jps</userinput>    
13901 Jps
13639 HQuorumPeer
13737 HRegionServer
            </screen>
          </example>
          <note>
            <title>ZooKeeper进程名</title>
            <para> <code>HQuorumPeer</code> 进程是一个被HBase控制和启动的ZooKeeper实例。如果你用这种方式使用ZooKeeper，它在每个节点上将被限定只有一个实例，并且仅仅只适合在测试时使用。如果你在HBase外部启动了ZooKeeper，那么ZooKeeper的进程被叫做<code>QuorumPeer</code>。更多关于ZooKeeper的配置信息，包括如何在HBase中使用外部的ZooKeeper，请参考  <xref
                linkend="zookeeper" />。</para>
          </note>
        </step>
        <step>
          <title>浏览Web UI</title>
          <note>
            <title>Web UI端口变化</title>
            <para>在HBase 0.98.x及之后的版本, HBase Web UI的端口已经改变。Master的查看端口从60010变为了16610。而RegionServer的查看端口从60030变为了16030。</para>
          </note>
          <para>如果所有的事项都被正确运行，你应该能使用浏览器打开<literal>http://node-a.example.com:60110/</literal>从而连接到master或从(secondary)master的UI页面，你可以通过Web UI查看每一个RegionServers，它们的端口为60130，IP为对应的RegionServer的IP地址。或者通过点击Master的web UI上的链接打开RegionServer的web UI页面。</para>
        </step>
        <step>
          <title>测试当节点或服务消失</title>
          <para>像这样只配置了三个节点的集群，在使用时不会有很好的弹性。你可以通过杀死进程来测试当主Master或者一个RegionServer消失时会发生什么，可以查看对应的日志信息。</para>
        </step>
      </procedure>
    </section>
    
    <section>
      <title>下一步</title>

      <para>下一个章节， <xref
          linkend="configuration" />,提供了有关不同HBase的运行模式、运行HBase的系统要求以及分布式HBase集群重要配置的更多信息。</para>
    </section>
  </section>
</chapter>
